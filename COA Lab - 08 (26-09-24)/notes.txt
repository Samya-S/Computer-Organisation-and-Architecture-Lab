1/3 is 0.33333333...
1/3 in 3 significant places is 0.333
Hence 1/3 in 3 significant places < (1/3)

2/3 is 0.6666666....
2/3 in 3 significant places is 0.667
Hence 2/3 in significant places > 2/3


1/3 in binary is 0.0101010101010.....
1/3 in 6 significant bits is 0.0101011 > 0.01010101010....

#include <stdio.h>
int main()
{   float a=1.0/3;
    if (a>1.0/3) printf("GT");
    if (a<1.0/3) printf("LS");
    if (a==1.0/3) printf("EQ");
    return 0;
}

float stores 1/3 in 24 bits. 
It is greater than 1/3 in infinite bits. 
Hence answer of above program is GT.


8 bit or 24 bits does not make any difference in case of 1/3.
2+1/3 is 10.0101010101....
In 6 bits it is 10.0101 it is lesser than in infinite bits. 
Hence output of following is LS.

#include <stdio.h>
int main()
{   int k=2;float a=k+1.0/3;
    if (a>k+1.0/3) printf("GT");
    if (a<k+1.0/3) printf("LS");
    if (a==k+1.0/3) printf("EQ");
    return 0;
}

5+1.0/3=101.01010101...
In 6 bits it is 101.011 > in infinite bits.  GT



5.1628 in 4 digits is 5.163
5.1623 in 4 digits is 5.162
5.1625 in 4 digits is 5.162
5.1635 in 4 digits is 5.164

When last digit is 5 then previous digit is observed. 
If odd then increment else retain.

5.1747 in 4 digits is 5.175. This (5.175) in 3 digits is 5.18. 5.1747 in 3 digits is 5.17. Double update is bigger.
5.1653 in 4 digits is 5.165. This (5.165) in 3 digits is 5.16. 5.1653 in 3 digits is 5.17. Single update is bigger.


Let 5 significant digits
22+5.1747=27.175  Now 300+27.175=327.18  
(22+300)+5.1747=322+5.1747=327.17
Conclusion: (22+5.1747)+300 > (22+300)+5.1747

Assume 8 bits.
2+1/3=10.010101. Now add 4 110.01010
6+1/3=110.01011  
Hence 6+1/3 > 2+1/3+4

#include <stdio.h>
int main()
{   int p=2,q=4;float a=p+1.0/3; a=a+q;float b=p+q+1.0/3;
    if (a>b) printf("GT");
    if (a<b) printf("LS");
    if (a==b) printf("EQ");
    return 0;
}

6+1/3=110.01011 Now add 3. 1001.0110  In last bit 1 is added since previous bit is 1.
9+1/3=1001.0101  
Hence 6+1/3+3>9+1/3
